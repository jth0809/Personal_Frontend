name: Build and Push Docker Images

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 여기에 관리할 앱 목록을 정의합니다.
        app: [frontend, backend]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # 1. 변경된 파일 목록을 가져옵니다.
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44 # 유명한 변경 감지 액션

      # 3. 변경이 있을 때만 아래 단계를 실행합니다.
      - name: Set up Docker Buildx
        if: steps.check_changes.outputs.changed == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        if: steps.check_changes.outputs.changed == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 4. (핵심) Docker 이미지 메타데이터(이름, 태그) 자동 생성
      # 이 액션이 자동으로 레포지토리 이름을 소문자로 변환해 줍니다.
      - name: Extract metadata for Docker
        id: meta
        if: steps.check_changes.outputs.changed == 'true'
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.app }}

      # 5. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        if: steps.check_changes.outputs.changed == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./apps/${{ matrix.app }}/Dockerfile
          push: github.event_name == 'push' # main 브랜치에 push 될 때만 실제로 푸시
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max